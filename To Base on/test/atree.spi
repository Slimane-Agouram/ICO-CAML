    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 0
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART rien
    rien_f=0
rien:
    move $v0, $a0
rien_end:
    j    $ra
    
#FUNSTART test
    test_f=8
test:
    subu $sp, $sp, test_f
    sw   $ra, 0($sp) # store $124
    sw   $s0, 4($sp) # store $125
    li   $v0, 5
    add  $v0, $v0, 4
    add  $v0, $v0, 3
    add  $v0, $v0, 2
    add  $a0, $v0, 1
    li   $v0, 1
    li   $a1, 2
    li   $a2, 3
    li   $a3, 4
    sub  $a3, $a3, 5
    sub  $a2, $a2, $a3
    sub  $a0, $a2, $a0
    sub  $a0, $a1, $a0
    sub  $a0, $v0, $a0
    jal  rien
    move $s0, $v0
    move $a0, $s0
    jal  rien
    add  $s0, $s0, $v0
    move $v0, $s0
test_end:
    lw   $ra, 0($sp) # load  $124
    lw   $s0, 4($sp) # load  $125
    addu $sp, $sp, test_f
    j    $ra
    
#FUNSTART main
    main_f=4
main:
    subu $sp, $sp, main_f
    sw   $ra, 0($sp) # store $145
    li   $a0, 10
    jal  test
    move $a0, $v0
    jal  println_int
main_end:
    lw   $ra, 0($sp) # load  $145
    addu $sp, $sp, main_f
    j    $ra
