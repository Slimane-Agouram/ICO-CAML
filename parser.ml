type token =
  | INT of (int)
  | IDENT of (string)
  | STRING of (string)
  | BOOL of (bool)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LESSGREATER
  | LESSEQUAL
  | GREATEREQUAL
  | LESS
  | GREATER
  | EQUAL
  | EQUALEQUAL
  | COLON
  | COLONEQUAL
  | COMMA
  | SEMI
  | SEMISEMI
  | DOT
  | BEGIN
  | END
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | VAR
  | FUNCTION
  | PROCEDURE
  | PROGRAM
  | WRITE
  | WRITELN
  | READ
  | ALLOC
  | INTEGER
  | BOOLEAN
  | ARRAY
  | OF
  | TYPE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Pp
open Printf
# 54 "parser.ml"
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LESSGREATER *);
  266 (* LESSEQUAL *);
  267 (* GREATEREQUAL *);
  268 (* LESS *);
  269 (* GREATER *);
  270 (* EQUAL *);
  271 (* EQUALEQUAL *);
  272 (* COLON *);
  273 (* COLONEQUAL *);
  274 (* COMMA *);
  275 (* SEMI *);
  276 (* SEMISEMI *);
  277 (* DOT *);
  278 (* BEGIN *);
  279 (* END *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* LBRACKET *);
  283 (* RBRACKET *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* WHILE *);
  288 (* DO *);
  289 (* VAR *);
  290 (* FUNCTION *);
  291 (* PROCEDURE *);
  292 (* PROGRAM *);
  293 (* WRITE *);
  294 (* WRITELN *);
  295 (* READ *);
  296 (* ALLOC *);
  297 (* INTEGER *);
  298 (* BOOLEAN *);
  299 (* ARRAY *);
  300 (* OF *);
  301 (* TYPE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
  259 (* STRING *);
  260 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\002\000\002\000\006\000\006\000\008\000\
\008\000\007\000\003\000\003\000\010\000\010\000\011\000\011\000\
\012\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\004\000\015\000\015\000\017\000\017\000\
\016\000\016\000\018\000\018\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\005\000\001\000\001\000\002\000\000\000\003\000\000\000\003\000\
\001\000\003\000\003\000\000\000\010\000\008\000\002\000\000\000\
\003\000\000\000\003\000\003\000\006\000\004\000\004\000\004\000\
\004\000\004\000\006\000\003\000\002\000\000\000\003\000\000\000\
\002\000\000\000\003\000\000\000\003\000\001\000\002\000\001\000\
\001\000\004\000\006\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\006\000\
\055\000\056\000\000\000\010\000\000\000\000\000\038\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\003\000\001\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\057\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\022\000\025\000\
\026\000\024\000\000\000\031\000\000\000\017\000\000\000\000\000\
\000\000\042\000\044\000\000\000\000\000\000\000\000\000\014\000\
\035\000\021\000\043\000\000\000\000\000\013\000"

let yydgoto = "\002\000\
\004\000\006\000\013\000\021\000\048\000\008\000\009\000\010\000\
\028\000\014\000\052\000\082\000\043\000\044\000\045\000\087\000\
\067\000\114\000"

let yysindex = "\018\000\
\244\254\000\000\015\255\000\000\048\255\236\254\040\255\000\000\
\041\255\052\255\061\255\069\255\056\255\067\255\048\255\048\255\
\225\254\063\255\074\255\045\255\060\255\236\254\000\000\000\000\
\000\000\000\000\082\255\000\000\048\255\048\255\000\000\248\254\
\000\000\021\255\045\255\021\255\021\255\021\255\080\255\081\255\
\087\255\104\255\112\255\051\001\109\255\000\000\000\000\000\000\
\000\000\225\254\114\255\110\255\117\255\021\255\021\255\113\255\
\128\255\116\255\221\000\031\000\251\255\021\255\021\255\154\255\
\021\255\045\255\000\000\021\255\021\255\021\255\021\255\021\255\
\021\255\021\255\021\255\021\255\021\255\021\255\000\000\000\000\
\048\255\000\000\143\255\142\255\061\001\231\000\135\255\021\255\
\021\255\000\000\000\000\045\255\045\255\253\000\007\001\138\255\
\029\001\112\255\049\255\049\255\128\255\128\255\020\001\020\001\
\020\001\020\001\020\001\020\001\188\000\114\255\225\254\015\255\
\021\255\000\000\000\000\140\255\198\000\137\255\000\000\000\000\
\000\000\000\000\225\254\000\000\153\255\000\000\163\255\056\255\
\231\000\000\000\000\000\045\255\159\255\021\255\015\255\000\000\
\000\000\000\000\000\000\061\001\056\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\239\254\000\000\030\255\165\255\172\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\255\
\000\000\000\000\000\000\166\255\000\000\165\255\000\000\000\000\
\000\000\000\000\000\000\000\000\168\255\168\255\000\000\083\001\
\000\000\000\000\166\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\170\255\000\000\000\000\000\000\177\255\083\255\
\111\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\255\178\255\000\000\177\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\255\195\255\223\255\139\255\167\255\040\000\064\000\
\088\000\112\000\136\000\160\000\000\000\170\255\000\000\169\255\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\093\001\000\000\000\000\000\000\
\178\255\000\000\000\000\000\000\000\000\000\000\169\255\000\000\
\000\000\000\000\000\000\084\255\000\000\000\000"

let yygindex = "\000\000\
\000\000\174\255\190\000\141\255\000\000\194\000\234\255\200\000\
\207\255\000\000\186\000\107\000\196\255\222\255\184\000\133\000\
\125\000\097\000"

let yytablesize = 631
let yytable = "\057\000\
\080\000\059\000\060\000\061\000\005\000\098\000\051\000\051\000\
\054\000\025\000\026\000\027\000\136\000\011\000\012\000\055\000\
\005\000\005\000\001\000\085\000\086\000\031\000\056\000\003\000\
\033\000\142\000\034\000\094\000\095\000\128\000\097\000\118\000\
\119\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\036\000\031\000\032\000\005\000\
\033\000\007\000\034\000\007\000\141\000\086\000\117\000\070\000\
\071\000\015\000\110\000\016\000\042\000\127\000\018\000\007\000\
\007\000\019\000\035\000\017\000\036\000\019\000\019\000\138\000\
\037\000\133\000\089\000\038\000\019\000\020\000\129\000\046\000\
\047\000\039\000\040\000\041\000\042\000\022\000\029\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\030\000\041\000\140\000\041\000\041\000\027\000\062\000\
\063\000\041\000\027\000\041\000\041\000\041\000\064\000\041\000\
\041\000\027\000\041\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\050\000\039\000\065\000\
\039\000\039\000\066\000\079\000\081\000\039\000\083\000\039\000\
\088\000\039\000\090\000\039\000\039\000\084\000\039\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\089\000\047\000\096\000\047\000\047\000\111\000\115\000\
\112\000\047\000\122\000\047\000\130\000\047\000\132\000\047\000\
\047\000\134\000\047\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\135\000\048\000\139\000\
\048\000\048\000\012\000\009\000\030\000\048\000\005\000\048\000\
\016\000\048\000\018\000\048\000\048\000\032\000\048\000\045\000\
\045\000\034\000\036\000\045\000\045\000\045\000\045\000\045\000\
\045\000\024\000\045\000\049\000\045\000\045\000\023\000\053\000\
\126\000\045\000\058\000\045\000\116\000\045\000\124\000\045\000\
\045\000\137\000\045\000\046\000\046\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\000\000\046\000\000\000\
\046\000\046\000\000\000\000\000\000\000\046\000\000\000\046\000\
\000\000\046\000\000\000\046\000\046\000\000\000\046\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\089\000\000\000\000\000\023\000\
\000\000\000\000\093\000\023\000\000\000\000\000\042\000\000\000\
\000\000\000\000\023\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\054\000\
\089\000\054\000\054\000\092\000\000\000\000\000\054\000\000\000\
\054\000\000\000\054\000\000\000\054\000\054\000\000\000\054\000\
\050\000\050\000\050\000\050\000\050\000\050\000\000\000\050\000\
\000\000\050\000\050\000\000\000\000\000\000\000\050\000\000\000\
\050\000\000\000\050\000\000\000\050\000\050\000\000\000\050\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\052\000\
\000\000\052\000\052\000\000\000\000\000\000\000\052\000\000\000\
\052\000\000\000\052\000\000\000\052\000\052\000\000\000\052\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\000\000\049\000\049\000\000\000\000\000\000\000\049\000\000\000\
\049\000\000\000\049\000\000\000\049\000\049\000\000\000\049\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\051\000\
\000\000\051\000\051\000\000\000\000\000\000\000\051\000\000\000\
\051\000\000\000\051\000\000\000\051\000\051\000\000\000\051\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\053\000\
\000\000\053\000\053\000\000\000\000\000\000\000\053\000\000\000\
\053\000\000\000\053\000\000\000\053\000\053\000\000\000\053\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\089\000\125\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\131\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\091\000\089\000\000\000\
\113\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\120\000\089\000\000\000\
\068\000\069\000\070\000\071\000\000\000\000\000\000\000\121\000\
\089\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\123\000\089\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000"

let yycheck = "\034\000\
\050\000\036\000\037\000\038\000\022\001\066\000\029\000\030\000\
\017\001\041\001\042\001\043\001\128\000\034\001\035\001\024\001\
\034\001\035\001\001\000\054\000\055\000\001\001\002\001\036\001\
\004\001\141\000\006\001\062\000\063\000\112\000\065\000\092\000\
\093\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\024\001\001\001\002\001\033\001\
\004\001\002\001\006\001\022\001\135\000\088\000\089\000\007\001\
\008\001\018\001\081\000\019\001\040\001\111\000\002\001\034\001\
\035\001\019\001\022\001\016\001\024\001\023\001\002\001\132\000\
\028\001\123\000\026\001\031\001\030\001\022\001\113\000\020\001\
\021\001\037\001\038\001\039\001\040\001\019\001\024\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\024\001\016\001\134\000\018\001\019\001\019\001\024\001\
\024\001\023\001\023\001\025\001\026\001\027\001\024\001\029\001\
\030\001\030\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\044\001\016\001\024\001\
\018\001\019\001\019\001\023\001\019\001\023\001\025\001\025\001\
\024\001\027\001\023\001\029\001\030\001\025\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\026\001\016\001\002\001\018\001\019\001\016\001\025\001\
\019\001\023\001\025\001\025\001\025\001\027\001\030\001\029\001\
\030\001\017\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\019\001\016\001\025\001\
\018\001\019\001\022\001\016\001\023\001\023\001\022\001\025\001\
\025\001\027\001\025\001\029\001\030\001\023\001\032\001\005\001\
\006\001\025\001\025\001\009\001\010\001\011\001\012\001\013\001\
\014\001\016\000\016\001\022\000\018\001\019\001\015\000\030\000\
\110\000\023\001\035\000\025\001\088\000\027\001\098\000\029\001\
\030\001\129\000\032\001\005\001\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\025\001\
\255\255\027\001\255\255\029\001\030\001\255\255\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\026\001\255\255\255\255\019\001\
\255\255\255\255\032\001\023\001\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\026\001\018\001\019\001\029\001\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\029\001\030\001\255\255\032\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\025\001\026\001\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\025\001\026\001\255\255\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LESSGREATER\000\
  LESSEQUAL\000\
  GREATEREQUAL\000\
  LESS\000\
  GREATER\000\
  EQUAL\000\
  EQUALEQUAL\000\
  COLON\000\
  COLONEQUAL\000\
  COMMA\000\
  SEMI\000\
  SEMISEMI\000\
  DOT\000\
  BEGIN\000\
  END\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  VAR\000\
  FUNCTION\000\
  PROCEDURE\000\
  PROGRAM\000\
  WRITE\000\
  WRITELN\000\
  READ\000\
  ALLOC\000\
  INTEGER\000\
  BOOLEAN\000\
  ARRAY\000\
  OF\000\
  TYPE\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  STRING\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'vars) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'definitions) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'endtok) in
    Obj.repr(
# 32 "parser.mly"
    ( {global_vars = _2; definitions = _3; main = _4 } )
# 420 "parser.ml"
               : Pp.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
           (())
# 426 "parser.ml"
               : 'endtok))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
           (())
# 432 "parser.ml"
               : 'endtok))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args2) in
    Obj.repr(
# 41 "parser.mly"
                              ( _2 )
# 439 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                              ( [] )
# 445 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args2) in
    Obj.repr(
# 46 "parser.mly"
                     ( _1 @ _3 )
# 453 "parser.ml"
               : 'args2))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                     ( [] )
# 459 "parser.ml"
               : 'args2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'idents) in
    Obj.repr(
# 51 "parser.mly"
                     (_1 :: _3 )
# 467 "parser.ml"
               : 'idents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                     ( [ _1 ] )
# 474 "parser.ml"
               : 'idents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'idents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 56 "parser.mly"
                                   ( List.map (fun x -> x, _3) _1 )
# 482 "parser.ml"
               : 'declvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fonction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definitions) in
    Obj.repr(
# 59 "parser.mly"
                                      ( _1 :: _3 )
# 490 "parser.ml"
               : 'definitions))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                                      ( [] )
# 496 "parser.ml"
               : 'definitions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'args) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 64 "parser.mly"
    ( _2, { arguments = _4; result = Some _7; local_vars = _9; body = _10 } )
# 507 "parser.ml"
               : 'fonction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 66 "parser.mly"
    ( _2, { arguments = _4; result = None; local_vars = _7; body = _8 } )
# 517 "parser.ml"
               : 'fonction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declvar) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args1) in
    Obj.repr(
# 69 "parser.mly"
                                      ( _1 @ _2 )
# 525 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                                      ( [] )
# 531 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args1) in
    Obj.repr(
# 73 "parser.mly"
                                      ( _2 @ _3 )
# 539 "parser.ml"
               : 'args1))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                                      ( [] )
# 545 "parser.ml"
               : 'args1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 77 "parser.mly"
                                      ( Set (_1, _3) )
# 553 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 78 "parser.mly"
                                      ( Sequence _2 )
# 560 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'instruction) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'instruction) in
    Obj.repr(
# 80 "parser.mly"
                                      ( If (_2, _4, _6) )
# 569 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'instruction) in
    Obj.repr(
# 81 "parser.mly"
                                      ( While (_2, _4) )
# 577 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 82 "parser.mly"
                                      ( Procedure_call (_1, _3) )
# 585 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 83 "parser.mly"
                                      ( Read_int (_3) )
# 592 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 84 "parser.mly"
                                      ( Write_int (_3) )
# 599 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 85 "parser.mly"
                                      ( Writeln_int (_3) )
# 606 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 87 "parser.mly"
                                      ( Seti (_1, _3, _6) )
# 615 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bloc) in
    Obj.repr(
# 91 "parser.mly"
                                      ( _2 )
# 622 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instruction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bloc1) in
    Obj.repr(
# 95 "parser.mly"
                                      ( _1 :: _2 )
# 630 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                                      ( [] )
# 636 "parser.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instruction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc1) in
    Obj.repr(
# 100 "parser.mly"
                                      ( _2 :: _3 )
# 644 "parser.ml"
               : 'bloc1))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                      ( [] )
# 650 "parser.ml"
               : 'bloc1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 105 "parser.mly"
                                      ( _1 :: _2 )
# 658 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                                      ( [] )
# 664 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 110 "parser.mly"
                                      ( _2 :: _3 )
# 672 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                      ( [] )
# 678 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 116 "parser.mly"
                                      ( _2 )
# 685 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 117 "parser.mly"
                                      ( Int _1 )
# 692 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 118 "parser.mly"
                                      ( Bin (Minus, Int 0, _2) )
# 699 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 119 "parser.mly"
                                      ( Bool _1 )
# 706 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                      ( Get _1 )
# 713 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 121 "parser.mly"
                                      ( Function_call (_1, _3) )
# 721 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    Obj.repr(
# 123 "parser.mly"
                                      ( Alloc (_3,_5) )
# 729 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 125 "parser.mly"
                                      ( Geti (_1, _3) )
# 737 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 126 "parser.mly"
                                      ( Bin (Plus, _1, _3) )
# 745 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 127 "parser.mly"
                                      ( Bin (Minus, _1, _3) )
# 753 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 128 "parser.mly"
                                      ( Bin (Times, _1, _3) )
# 761 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 129 "parser.mly"
                                      ( Bin (Div, _1, _3) )
# 769 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 131 "parser.mly"
                                      ( Bin (Lt, _1, _3) )
# 777 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 132 "parser.mly"
                                      ( Bin (Le, _1, _3) )
# 785 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 133 "parser.mly"
                                      ( Bin (Gt, _1, _3) )
# 793 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 134 "parser.mly"
                                      ( Bin (Ge, _1, _3) )
# 801 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 135 "parser.mly"
                                      ( Bin (Eq, _1, _3) )
# 809 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 136 "parser.mly"
                                      ( Bin (Ne, _1, _3) )
# 817 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                                       ( Integer )
# 823 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                                       ( Boolean )
# 829 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 143 "parser.mly"
                                       ( Array (_3) )
# 836 "parser.ml"
               : 'type_expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pp.program)
