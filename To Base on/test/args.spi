    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 4
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART f
    f_f=0
f:
    lw   $v0, 0+f_f($sp)
    lw   $t0, 4+f_f($sp)
    lw   $t1, 8+f_f($sp)
    lw   $t2, 12+f_f($sp)
    add  $a0, $a0, $a1
    add  $a0, $a0, $a2
    add  $a0, $a0, $a3
    add  $v0, $a0, $v0
    add  $v0, $v0, $t0
    add  $v0, $v0, $t1
    add  $v0, $v0, $t2
f_end:
    j    $ra
    
#FUNSTART g
    g_f=0
g:
    move $v0, $a0
g_end:
    j    $ra
    
#FUNSTART main
    main_f=28
main:
    subu $sp, $sp, main_f
    sw   $ra, 16($sp) # store $147
    sw   $s0, 20($sp) # store $148
    sw   $s1, 24($sp) # store $149
    li   $v0, 1
    sw   $v0, 0($gp)
    lw   $s0, 0($gp)
    li   $a0, 2
    jal  g
    move $s1, $v0
    li   $a0, 8
    jal  g
    move $a0, $v0
    jal  g
    move $a0, $s0
    move $a1, $s1
    li   $a2, 3
    li   $a3, 4
    li   $t0, 5
    sw   $t0, 0($sp)
    li   $t0, 6
    sw   $t0, 4($sp)
    li   $t0, 7
    sw   $t0, 8($sp)
    sw   $v0, 12($sp)
    jal  f
    move $a0, $v0
    jal  println_int
main_end:
    lw   $ra, 16($sp) # load  $147
    lw   $s0, 20($sp) # load  $148
    lw   $s1, 24($sp) # load  $149
    addu $sp, $sp, main_f
    j    $ra
