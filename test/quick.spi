    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 8
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART lire
    lire_f=0
lire:
    move $a2, $ra
    li   $a0, 100
    jal  alloc
    sw   $v0, 0($gp)
    sw   $zero, 4($gp)
    jal  read_int
    b    L17
L16:
    lw   $a0, 0($gp)
    lw   $a1, 4($gp)
    sll  $a1, $a1, 2
    addu $a0, $a0, $a1
    sw   $v0, 0($a0)
    lw   $v0, 4($gp)
    add  $v0, $v0, 1
    sw   $v0, 4($gp)
    jal  read_int
L17:
    bne  $v0, $zero, L16
lire_end:
    move $ra, $a2
    j    $ra
    
#FUNSTART tri
    tri_f=16
tri:
    subu $sp, $sp, tri_f
    sw   $ra, 0($sp) # store $134
    sw   $s0, 4($sp) # store $135
    sw   $s1, 8($sp) # store $136
    sw   $s2, 12($sp) # store $137
    move $s1, $a0
    move $s0, $a2
    bge  $a1, $s0, tri_end
L19:
    sll  $v0, $a1, 2
    addu $v0, $s1, $v0
    lw   $v0, 0($v0)
    move $s2, $a1
    add  $a3, $a1, 1
    b    L23
L22:
    sll  $t0, $a3, 2
    addu $t0, $s1, $t0
    lw   $t0, 0($t0)
    blt  $t0, $v0, L25
L26:
    add  $a3, $a3, 1
    b    L23
L25:
    add  $s2, $s2, 1
    sll  $t0, $s2, 2
    addu $t0, $s1, $t0
    lw   $t2, 0($t0)
    sll  $t0, $a3, 2
    addu $t0, $s1, $t0
    lw   $t0, 0($t0)
    sll  $t1, $s2, 2
    addu $t1, $s1, $t1
    sw   $t0, 0($t1)
    sll  $t0, $a3, 2
    addu $t0, $s1, $t0
    sw   $t2, 0($t0)
    add  $a3, $a3, 1
L23:
    blt  $a3, $s0, L22
L24:
    sll  $v0, $s2, 2
    addu $v0, $s1, $v0
    lw   $t2, 0($v0)
    sll  $v0, $a1, 2
    addu $v0, $s1, $v0
    lw   $v0, 0($v0)
    sll  $a3, $s2, 2
    addu $a3, $s1, $a3
    sw   $v0, 0($a3)
    sll  $v0, $a1, 2
    addu $v0, $s1, $v0
    sw   $t2, 0($v0)
    move $a0, $s1
    move $a2, $s2
    jal  tri
    move $a0, $s1
    add  $a1, $s2, 1
    move $a2, $s0
    jal  tri
tri_end:
    lw   $ra, 0($sp) # load  $134
    lw   $s0, 4($sp) # load  $135
    lw   $s1, 8($sp) # load  $136
    lw   $s2, 12($sp) # load  $137
    addu $sp, $sp, tri_f
    j    $ra
    
#FUNSTART affiche
    affiche_f=0
affiche:
    move $a2, $ra
    move $a1, $zero
    b    L29
L28:
    lw   $v0, 0($gp)
    sll  $a0, $a1, 2
    addu $v0, $v0, $a0
    lw   $a0, 0($v0)
    jal  println_int
    add  $a1, $a1, 1
L29:
    lw   $v0, 4($gp)
    blt  $a1, $v0, L28
affiche_end:
    move $ra, $a2
    j    $ra
    
#FUNSTART main
    main_f=4
main:
    subu $sp, $sp, main_f
    sw   $ra, 0($sp) # store $179
    jal  lire
    lw   $a0, 0($gp)
    move $a1, $zero
    lw   $a2, 4($gp)
    jal  tri
    jal  affiche
main_end:
    lw   $ra, 0($sp) # load  $179
    addu $sp, $sp, main_f
    j    $ra
