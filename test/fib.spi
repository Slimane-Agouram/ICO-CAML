    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 4
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART fib
    fib_f=12
fib:
    subu $sp, $sp, fib_f
    sw   $ra, 0($sp) # store $113
    sw   $s0, 4($sp) # store $114
    sw   $s1, 8($sp) # store $115
    move $s0, $a0
    li   $v0, 1
    ble  $s0, $v0, L12
L13:
    sub  $a0, $s0, 1
    jal  fib
    move $s1, $v0
    sub  $a0, $s0, 2
    jal  fib
    add  $v0, $s1, $v0
    b    fib_end
L12:
    li   $v0, 1
fib_end:
    lw   $ra, 0($sp) # load  $113
    lw   $s0, 4($sp) # load  $114
    lw   $s1, 8($sp) # load  $115
    addu $sp, $sp, fib_f
    j    $ra
    
#FUNSTART main
    main_f=4
main:
    subu $sp, $sp, main_f
    sw   $ra, 0($sp) # store $123
    jal  read_int
    sw   $v0, 0($gp)
    lw   $a0, 0($gp)
    jal  fib
    move $a0, $v0
    jal  println_int
main_end:
    lw   $ra, 0($sp) # load  $123
    addu $sp, $sp, main_f
    j    $ra
