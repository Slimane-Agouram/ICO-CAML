    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 20
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART modulo
    modulo_f=0
modulo:
    div  $v0, $a0, $a1
    mul  $v0, $v0, $a1
    sub  $v0, $a0, $v0
modulo_end:
    j    $ra
    
#FUNSTART grandir
    grandir_f=16
grandir:
    subu $sp, $sp, grandir_f
    sw   $ra, 0($sp) # store $167
    sw   $s0, 4($sp) # store $168
    sw   $s1, 8($sp) # store $169
    sw   $s2, 12($sp) # store $170
    move $s0, $a0
    lw   $v0, 0($gp)
    add  $a0, $v0, 1
    jal  alloc
    move $s1, $v0
    move $s2, $zero
    b    L29
L28:
    add  $s2, $s2, 1
    move $a0, $s0
    li   $a1, 10
    jal  modulo
    sll  $a1, $s2, 2
    addu $a1, $s1, $a1
    sw   $v0, 0($a1)
    div  $s0, $s0, 10
L29:
    bgt  $s0, $zero, L28
L30:
    sw   $s2, 0($s1)
    move $v0, $s1
grandir_end:
    lw   $ra, 0($sp) # load  $167
    lw   $s0, 4($sp) # load  $168
    lw   $s1, 8($sp) # load  $169
    lw   $s2, 12($sp) # load  $170
    addu $sp, $sp, grandir_f
    j    $ra
    
#FUNSTART affiche
    affiche_f=0
affiche:
    move $a3, $ra
    move $a1, $a0
    lw   $a2, 0($a1)
    b    L32
L31:
    sll  $v0, $a2, 2
    addu $v0, $a1, $v0
    lw   $a0, 0($v0)
    jal  print_int
    sub  $a2, $a2, 1
L32:
    li   $v0, 1
    bgt  $a2, $v0, L31
L33:
    lw   $v0, 0($a1)
    beq  $v0, $zero, L34
L35:
    lw   $a0, 4($a1)
    jal  println_int
    b    affiche_end
L34:
    move $a0, $zero
    jal  println_int
affiche_end:
    move $ra, $a3
    j    $ra
    
#FUNSTART bigadd
    bigadd_f=24
bigadd:
    subu $sp, $sp, bigadd_f
    sw   $ra, 0($sp) # store $192
    sw   $s0, 4($sp) # store $193
    sw   $s1, 8($sp) # store $194
    sw   $s2, 12($sp) # store $195
    sw   $s3, 16($sp) # store $196
    sw   $s4, 20($sp) # store $197
    move $s2, $a0
    move $s1, $a1
    lw   $v0, 0($s2)
    lw   $a2, 0($s1)
    blt  $v0, $a2, L37
L38:
    lw   $s4, 0($s1)
    b    L39
L37:
    lw   $s4, 0($s2)
L39:
    li   $s0, 1
    move $s3, $zero
    b    L41
L40:
    sll  $v0, $s0, 2
    addu $v0, $s2, $v0
    lw   $v0, 0($v0)
    sll  $a2, $s0, 2
    addu $a2, $s1, $a2
    lw   $a2, 0($a2)
    add  $v0, $v0, $a2
    add  $s3, $v0, $s3
    move $a0, $s3
    li   $a1, 10
    jal  modulo
    sll  $a2, $s0, 2
    addu $a2, $s2, $a2
    sw   $v0, 0($a2)
    div  $s3, $s3, 10
    add  $s0, $s0, 1
L41:
    ble  $s0, $s4, L40
L79:
    b    L44
L43:
    sll  $v0, $s0, 2
    addu $v0, $s2, $v0
    lw   $v0, 0($v0)
    add  $s3, $v0, $s3
    move $a0, $s3
    li   $a1, 10
    jal  modulo
    sll  $a2, $s0, 2
    addu $a2, $s2, $a2
    sw   $v0, 0($a2)
    div  $s3, $s3, 10
    add  $s0, $s0, 1
L44:
    lw   $v0, 0($s2)
    ble  $s0, $v0, L43
L80:
    b    L47
L46:
    sll  $v0, $s0, 2
    addu $v0, $s1, $v0
    lw   $v0, 0($v0)
    add  $s3, $v0, $s3
    move $a0, $s3
    li   $a1, 10
    jal  modulo
    sll  $a2, $s0, 2
    addu $a2, $s2, $a2
    sw   $v0, 0($a2)
    div  $s3, $s3, 10
    add  $s0, $s0, 1
L47:
    lw   $v0, 0($s1)
    ble  $s0, $v0, L46
L48:
    beq  $s3, $zero, L49
L50:
    sll  $v0, $s0, 2
    addu $v0, $s2, $v0
    sw   $s3, 0($v0)
    sw   $s0, 0($s2)
    b    bigadd_end
L49:
    sub  $v0, $s0, 1
    sw   $v0, 0($s2)
bigadd_end:
    lw   $ra, 0($sp) # load  $192
    lw   $s0, 4($sp) # load  $193
    lw   $s1, 8($sp) # load  $194
    lw   $s2, 12($sp) # load  $195
    lw   $s3, 16($sp) # load  $196
    lw   $s4, 20($sp) # load  $197
    addu $sp, $sp, bigadd_f
    j    $ra
    
#FUNSTART smallmult
    smallmult_f=24
smallmult:
    subu $sp, $sp, smallmult_f
    sw   $ra, 0($sp) # store $227
    sw   $s0, 4($sp) # store $228
    sw   $s1, 8($sp) # store $229
    sw   $s2, 12($sp) # store $230
    sw   $s3, 16($sp) # store $231
    sw   $s4, 20($sp) # store $232
    move $s4, $a0
    move $s3, $a1
    li   $s0, 1
    lw   $s2, 0($s4)
    move $s1, $zero
    b    L53
L52:
    sll  $v0, $s0, 2
    addu $v0, $s4, $v0
    lw   $v0, 0($v0)
    mul  $v0, $s3, $v0
    add  $s1, $s1, $v0
    move $a0, $s1
    li   $a1, 10
    jal  modulo
    sll  $a2, $s0, 2
    addu $a2, $s4, $a2
    sw   $v0, 0($a2)
    div  $s1, $s1, 10
    add  $s0, $s0, 1
L53:
    ble  $s0, $s2, L52
L81:
    b    L56
L55:
    move $a0, $s1
    li   $a1, 10
    jal  modulo
    sll  $a2, $s0, 2
    addu $a2, $s4, $a2
    sw   $v0, 0($a2)
    div  $s1, $s1, 10
    add  $s0, $s0, 1
L56:
    bgt  $s1, $zero, L55
L57:
    beq  $s3, $zero, L58
L59:
    sub  $v0, $s0, 1
    sw   $v0, 0($s4)
    b    smallmult_end
L58:
    sw   $zero, 0($s4)
smallmult_end:
    lw   $ra, 0($sp) # load  $227
    lw   $s0, 4($sp) # load  $228
    lw   $s1, 8($sp) # load  $229
    lw   $s2, 12($sp) # load  $230
    lw   $s3, 16($sp) # load  $231
    lw   $s4, 20($sp) # load  $232
    addu $sp, $sp, smallmult_f
    j    $ra
    
#FUNSTART copy
    copy_f=0
copy:
    lw   $v0, 0($a1)
    b    L62
L61:
    sll  $a2, $v0, 2
    addu $a2, $a1, $a2
    lw   $a2, 0($a2)
    sll  $a3, $v0, 2
    addu $a3, $a0, $a3
    sw   $a2, 0($a3)
    sub  $v0, $v0, 1
L62:
    bge  $v0, $zero, L61
copy_end:
    j    $ra
    
#FUNSTART bigmult
    bigmult_f=24
bigmult:
    subu $sp, $sp, bigmult_f
    sw   $ra, 0($sp) # store $259
    sw   $s0, 4($sp) # store $260
    sw   $s1, 8($sp) # store $261
    sw   $s2, 12($sp) # store $262
    sw   $s3, 16($sp) # store $263
    sw   $s4, 20($sp) # store $264
    move $s3, $a0
    move $s2, $a1
    move $s1, $a2
    sw   $zero, 0($s3)
    move $a0, $zero
    jal  grandir
    move $s0, $v0
    lw   $s4, 0($s1)
    b    L65
L64:
    move $a0, $s0
    move $a1, $s2
    jal  copy
    move $a0, $s0
    sll  $a3, $s4, 2
    addu $a3, $s1, $a3
    lw   $a1, 0($a3)
    jal  smallmult
    move $a0, $s3
    li   $a1, 10
    jal  smallmult
    move $a0, $s3
    move $a1, $s0
    jal  bigadd
    sub  $s4, $s4, 1
L65:
    bgt  $s4, $zero, L64
bigmult_end:
    lw   $ra, 0($sp) # load  $259
    lw   $s0, 4($sp) # load  $260
    lw   $s1, 8($sp) # load  $261
    lw   $s2, 12($sp) # load  $262
    lw   $s3, 16($sp) # load  $263
    lw   $s4, 20($sp) # load  $264
    addu $sp, $sp, bigmult_f
    j    $ra
    
#FUNSTART pow
    pow_f=20
pow:
    subu $sp, $sp, pow_f
    sw   $ra, 0($sp) # store $270
    sw   $s0, 4($sp) # store $271
    sw   $s1, 8($sp) # store $272
    sw   $s2, 12($sp) # store $273
    sw   $s3, 16($sp) # store $274
    move $s2, $a0
    move $s1, $a1
    move $s0, $a2
    li   $v0, 1
    beq  $s1, $v0, L67
L68:
    move $a0, $zero
    jal  grandir
    move $s3, $v0
    move $a0, $s3
    sra  $a1, $s1, 1
    move $a2, $s0
    jal  pow
    move $a0, $s2
    move $a1, $s3
    move $a2, $s3
    jal  bigmult
    sra  $a3, $s1, 1
    sll  $a3, $a3, 1
    beq  $a3, $s1, L69
L71:
    move $a0, $s3
    move $a1, $s0
    move $a2, $s2
    jal  bigmult
    move $a0, $s2
    move $a1, $s3
    jal  copy
    b    L69
L67:
    move $a0, $s2
    move $a1, $s0
    jal  copy
L69:
    move $a0, $s1
    jal  println_int
    move $a0, $s2
    jal  affiche
pow_end:
    lw   $ra, 0($sp) # load  $270
    lw   $s0, 4($sp) # load  $271
    lw   $s1, 8($sp) # load  $272
    lw   $s2, 12($sp) # load  $273
    lw   $s3, 16($sp) # load  $274
    addu $sp, $sp, pow_f
    j    $ra
    
#FUNSTART bigfact
    bigfact_f=12
bigfact:
    subu $sp, $sp, bigfact_f
    sw   $ra, 0($sp) # store $282
    sw   $s0, 4($sp) # store $283
    sw   $s1, 8($sp) # store $284
    move $s0, $a0
    li   $a0, 1
    jal  grandir
    move $s1, $v0
    b    L74
L73:
    move $a0, $s1
    move $a1, $s0
    jal  smallmult
    sub  $s0, $s0, 1
L74:
    bgt  $s0, $zero, L73
L75:
    move $v0, $s1
bigfact_end:
    lw   $ra, 0($sp) # load  $282
    lw   $s0, 4($sp) # load  $283
    lw   $s1, 8($sp) # load  $284
    addu $sp, $sp, bigfact_f
    j    $ra
    
#FUNSTART main
    main_f=4
main:
    subu $sp, $sp, main_f
    sw   $ra, 0($sp) # store $291
    li   $v0, 100
    sw   $v0, 0($gp)
    li   $a0, 2
    jal  grandir
    sw   $v0, 8($gp)
    move $a0, $zero
    jal  grandir
    sw   $v0, 16($gp)
    lw   $a0, 16($gp)
    li   $a1, 16
    lw   $a2, 8($gp)
    jal  pow
    lw   $a0, 16($gp)
    jal  affiche
    jal  read_int
    sw   $v0, 4($gp)
    b    L77
L76:
    lw   $a0, 4($gp)
    jal  bigfact
    move $a0, $v0
    jal  affiche
    jal  read_int
    sw   $v0, 4($gp)
L77:
    lw   $v0, 4($gp)
    bgt  $v0, $zero, L76
main_end:
    lw   $ra, 0($sp) # load  $291
    addu $sp, $sp, main_f
    j    $ra
