    
    .data	
nl:
    .asciiz "\n"
    .align 2
allocs:
    .asciiz "Alloc: "
    .align 2
Glob:
    .space 8
    .align 2
Mem:
    .space 16000    
    .text
    .globl __start
    .align 2

print_int:
    li  $v0, 1
    syscall 
    j   $ra
println_int:
    li  $v0, 1
    syscall 
    la  $a0, nl
    li  $v0, 4
    syscall
    j   $ra
read_int:
    li  $v0, 5
    syscall 
    j   $ra
alloc:
    sw  $a0, ($fp)              
    sll $a0, $a0, 2
    addu $v0, $fp, 4
    addu $fp, $v0, $a0
    j   $ra

__start:
    la    $fp, Mem
    la    $gp, Glob
    jal  main
    li    $v0, 10
    syscall


    
#FUNSTART even
    even_f=0
even:
    sra  $v0, $a0, 1
    sll  $v0, $v0, 1
    seq  $v0, $v0, $a0
even_end:
    j    $ra
    
#FUNSTART power
    power_f=16
power:
    subu $sp, $sp, power_f
    sw   $ra, 0($sp) # store $129
    sw   $s0, 4($sp) # store $130
    sw   $s1, 8($sp) # store $131
    sw   $s2, 12($sp) # store $132
    move $s1, $a0
    move $s0, $a1
    beq  $s0, $zero, L14
L15:
    move $a0, $s1
    sra  $a1, $s0, 1
    jal  power
    move $s2, $v0
    mul  $s2, $s2, $s2
    move $a0, $s0
    jal  even
    bne  $v0, $zero, L17
L18:
    mul  $v0, $s1, $s2
    b    power_end
L17:
    move $v0, $s2
    b    power_end
L14:
    li   $v0, 1
power_end:
    lw   $ra, 0($sp) # load  $129
    lw   $s0, 4($sp) # load  $130
    lw   $s1, 8($sp) # load  $131
    lw   $s2, 12($sp) # load  $132
    addu $sp, $sp, power_f
    j    $ra
    
#FUNSTART main
    main_f=4
main:
    subu $sp, $sp, main_f
    sw   $ra, 0($sp) # store $138
    jal  read_int
    sw   $v0, 0($gp)
    jal  read_int
    sw   $v0, 4($gp)
    lw   $a0, 0($gp)
    lw   $a1, 4($gp)
    jal  power
    move $a0, $v0
    jal  println_int
main_end:
    lw   $ra, 0($sp) # load  $138
    addu $sp, $sp, main_f
    j    $ra
